from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from app.db.session import Session
from app.db.models import User
from app.config import OWNER_ID, ADMIN_IDS
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("add_admin"))
async def add_admin(message: Message):
    if message.from_user.id != OWNER_ID:
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤")

    try:
        admin_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin [user_id]")

    session = Session()
    user = session.query(User).filter_by(user_id=admin_id).first()
    if user:
        user.role = 1
        session.commit()
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
        if admin_id not in ADMIN_IDS:
            ADMIN_IDS.append(admin_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        new_user = User(user_id=admin_id, role=1)
        session.add(new_user)
        session.commit()
        if admin_id not in ADMIN_IDS:
            ADMIN_IDS.append(admin_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∏ —Å—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º")


@router.message(Command("remove_admin"))
async def remove_admin(message: Message):
    if message.from_user.id != OWNER_ID:
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤")

    try:
        admin_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin [user_id]")

    session = Session()
    user = session.query(User).filter_by(user_id=admin_id).first()
    if user and user.role == 1:
        user.role = 0
        session.commit()
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if admin_id in ADMIN_IDS:
            ADMIN_IDS.remove(admin_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")


@router.message(Command("list_admins"))
async def list_admins(message: Message):
    if message.from_user.id != OWNER_ID:
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")

    session = Session()
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é >= 1 (–∞–¥–º–∏–Ω—ã –∏ –≤–ª–∞–¥–µ–ª–µ—Ü)
    admins = session.query(User).filter(User.role >= 1).all()

    if not admins:
        await message.answer("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return

    admin_list = ["üëë –í–ª–∞–¥–µ–ª–µ—Ü –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:"]

    for admin in admins:
        if admin.user_id == OWNER_ID:
            role_text = "–í–ª–∞–¥–µ–ª–µ—Ü"
        else:
            role_text = "–ê–¥–º–∏–Ω"
        username = f"@{admin.username}" if admin.username else "–Ω–µ—Ç username"
        admin_list.append(f"‚Ä¢ {role_text}: {admin.user_id} ({username})")

    await message.answer("\n".join(admin_list))