from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery

from app.db.session import Session
from app.db.models import User
from app.keyboards import get_main_menu
from app.utils.roles import get_user_role

router = Router()

class ProfileStates(StatesGroup):
    grade = State()
    subjects = State()
    region = State()
    username = State()
    consent = State()
    role = 0

@router.callback_query(F.data == "fill_profile")
async def handle_fill_profile(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await start_profile(callback.message, state)

@router.message(F.text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å")
async def cmd_profile(message: Message, state: FSMContext):
    await start_profile(message, state)

async def start_profile(message: Message, state: FSMContext):
    session = Session()
    user_id = message.from_user.id
    user = session.query(User).filter_by(user_id=user_id).first()
    if not user:
        user = User(user_id=user_id)
        session.add(user)
        session.commit()

    await message.answer("–í –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ –≤ 25/26 —É—á–µ–±–Ω–æ–º –≥–æ–¥—É? (–≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –∏–ª–∏ '-', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.)")
    await state.set_state(ProfileStates.grade)


@router.message(ProfileStates.grade)
async def set_grade(message: Message, state: FSMContext):
    if message.text.strip() == "-":
        await state.update_data(grade=None)
    else:
        try:
            grade = int(message.text.strip())
            if grade not in range(1, 12):
                raise ValueError
            await state.update_data(grade=grade)
        except ValueError:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 11 –∏–ª–∏ '-'.")

    await message.answer("–ö–∞–∫–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ —Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ '-', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")
    await state.set_state(ProfileStates.subjects)


@router.message(ProfileStates.subjects)
async def set_subjects(message: Message, state: FSMContext):
    if message.text.strip() == "-":
        await state.update_data(subjects=None)
    else:
        await state.update_data(subjects=message.text.strip())

    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —Ä–µ–≥–∏–æ–Ω–∞/–≥–æ—Ä–æ–¥–∞? (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")
    await state.set_state(ProfileStates.region)

@router.message(ProfileStates.region)
async def set_region(message: Message, state: FSMContext):
    await state.update_data(region=message.text.strip())

    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        f"–•–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–π Telegram-–Ω–∏–∫ @{message.from_user.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –≤ –∞–Ω–∫–µ—Ç–µ?",
        reply_markup=markup
    )
    await state.set_state(ProfileStates.username)

@router.message(ProfileStates.username)
async def set_username(message: Message, state: FSMContext):
    if message.text.strip() not in ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")

    if "‚úÖ" in message.text:
        await state.update_data(username=message.from_user.username or "")
    else:
        await state.update_data(username=None)

    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer("–¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞?", reply_markup=markup)
    await state.set_state(ProfileStates.consent)

@router.message(ProfileStates.consent)
async def set_consent(message: Message, state: FSMContext):
    if message.text.strip() not in ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")

    consent = "‚úÖ" in message.text
    session = Session()
    user = session.query(User).filter_by(user_id=message.from_user.id).first()

    if not user:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —Å /start –∏–ª–∏ üìù ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å¬ª.")
        await state.clear()
        return

    if not consent:
        user.grade = None
        user.subjects = None
        user.region = None
        user.username = None
        user.consent = False
        session.commit()

        await message.answer(
            "–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ ‚ùå, —Ç–∞–∫ –∫–∞–∫ —Ç—ã –Ω–µ –¥–∞–ª(–∞) —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_menu(get_user_role(message.from_user.id))
        )
        await state.clear()
        return

    data = await state.get_data()
    user.grade = data["grade"]
    user.subjects = data["subjects"]
    user.region = data["region"]
    user.username = data.get("username")
    user.consent = True
    session.commit()

    role = get_user_role(message.from_user.id)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ", reply_markup=get_main_menu(role))
    await state.clear()

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_menu(message: Message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É")],
            [KeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –ø—Ä–æ—Ñ–∏–ª–µ–º?", reply_markup=markup)


@router.message(F.text == "üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É")
async def show_profile(message: Message):
    session = Session()
    user = session.query(User).filter_by(user_id=message.from_user.id).first()
    if not user:
        return await message.answer("–¢—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª –∞–Ω–∫–µ—Ç—É.")

    text = f"""üìÑ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:
üßë –ù–∏–∫: @{user.username if user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"}
üéì –ö–ª–∞—Å—Å: {user.grade or "–Ω–µ —É–∫–∞–∑–∞–Ω"}
üìö –ü—Ä–µ–¥–º–µ—Ç—ã: {user.subjects or "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"}
üåç –†–µ–≥–∏–æ–Ω: {user.region or "–Ω–µ —É–∫–∞–∑–∞–Ω"}
‚úÖ –°–æ–≥–ª–∞—Å–∏–µ: {"–î–∞" if user.consent else "–ù–µ—Ç"}
"""
    await message.answer(text)
