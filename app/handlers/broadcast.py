from aiogram import Router, F, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from app.db.session import Session
from app.db.models import User
from app.keyboards import get_main_menu
from app.utils.roles import get_user_role
import asyncio
import logging

logger = logging.getLogger(__name__)
router = Router()


class BroadcastStates(StatesGroup):
    message = State()


@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def broadcast_start(message: Message, state: FSMContext):
    role = get_user_role(message.from_user.id)
    if role < 1:
        return await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(BroadcastStates.message)


@router.message(BroadcastStates.message)
async def broadcast_message(message: Message, state: FSMContext, bot: Bot):
    session = Session()
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –¥–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ
    users = session.query(User).all()

    success = 0
    failed = 0

    if not users:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    progress_msg = await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    for user in users:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy_message –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await bot.copy_message(
                chat_id=user.user_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
            success += 1
        except Exception as e:
            failed += 1
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞–∂–¥—ã–µ 5 –æ—Ç–ø—Ä–∞–≤–æ–∫
        if (success + failed) % 5 == 0:
            try:
                await progress_msg.edit_text(
                    f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                    f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å: {len(users) - success - failed}"
                )
            except:
                pass

        await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    try:
        await progress_msg.delete()
    except:
        pass

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
        reply_markup=get_main_menu(get_user_role(message.from_user.id))
    )
    await state.clear()