# app/handlers/library.py
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.db.session import Session
from app.db.models import Article

router = Router()

class LibraryStates(StatesGroup):
    reading = State()

def get_ordered_articles(session):
    return session.query(Article).order_by(Article.date.asc(), Article.id.asc()).all()

def list_articles_text(session) -> str:
    articles = get_ordered_articles(session)
    if not articles:
        return "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
    text = "üìö –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π:\n\n"
    for idx, a in enumerate(articles, start=1):
        text += f"{idx}. {a.title}\n"
    text += "\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ—ë (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1).\n–ö–Ω–æ–ø–∫–∞ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª –≤–µ—Ä–Ω—ë—Ç –≤ –º–µ–Ω—é."
    return text

@router.message(F.text == "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")
async def open_library(message: Message, state: FSMContext):
    session = Session()
    await state.set_state(LibraryStates.reading)

    markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

    await message.answer(
        "üìñ –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Å—Ç–∞—Ç—å–∏ –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ó–∞–±–æ—Ç–∞—Ç—å!¬ª. –ú—ã –æ–ø–∏—Ä–∞–µ–º—Å—è –Ω–∞ –Ω–∞—É—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, "
        "–Ω–æ –æ–±—ä—è—Å–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º."
    )
    await message.answer(list_articles_text(session), reply_markup=markup)


@router.message(LibraryStates.reading, F.text.regexp(r'^\d+$'))
async def read_article_by_number(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != LibraryStates.reading:
        return

    n = int(message.text.strip())
    session = Session()
    articles = get_ordered_articles(session)
    if n < 1 or n > len(articles):
        return await message.answer("‚ö†Ô∏è –°—Ç–∞—Ç—å—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å —Å–ø–∏—Å–æ–∫ –∏ –Ω–æ–º–µ—Ä.")

    article = articles[n - 1]
    date_str = article.date.strftime("%d.%m.%Y") if article.date else ""
    text = (
            f"üìÑ <b>{article.title}</b>\n\n"
            f"{article.description}\n\n"
            + (f"üìÖ {date_str}\n\n" if date_str else "")
            + f"üîó {article.link}"
    )
    await message.answer(text, parse_mode="HTML")

@router.message(LibraryStates.reading, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_library(message: Message, state: FSMContext):
    await state.clear()
    from app.keyboards import get_main_menu
    from app.utils.roles import get_user_role
    role = get_user_role(message.from_user.id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(role))
