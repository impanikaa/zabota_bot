from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from app.db.session import Session
from app.db.models import Feedback, User
from app.config import ADMIN_IDS as ADMINS
from app.keyboards import get_support_menu
from app.utils.format import format_user_info

router = Router()

class ChatStates(StatesGroup):
    waiting_problem = State()
    waiting_permissions = State()

@router.message(F.text == "üôè #–±–æ–ª—Ç–∞–ª–∫–∞")
async def start_chat(message: Message, state: FSMContext):
    await message.answer(
        "üí¨ –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ChatStates.waiting_problem)

@router.message(ChatStates.waiting_problem)
async def process_problem(message: Message, state: FSMContext):
    await state.update_data(problem_text=message.text)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –í—Å—ë —Ä–∞–∑—Ä–µ—à–∞—é", callback_data="permission_yes_yes"),
            InlineKeyboardButton(text="üìù –¢–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="permission_yes_no")
        ],
        [
            InlineKeyboardButton(text="üë§ –¢–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="permission_no_yes"),
            InlineKeyboardButton(text="‚ùå –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞—é", callback_data="permission_no_no")
        ]
    ])

    await message.answer(
        "–ß—Ç–æ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å?\n\n"
        "‚Ä¢ ‚úÖ –í—Å—ë - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚Ä¢ üìù –¢–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å (–±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è)\n"
        "‚Ä¢ üë§ –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å)\n"
        "‚Ä¢ ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞—é",
        reply_markup=markup
    )
    await state.set_state(ChatStates.waiting_permissions)

@router.callback_query(ChatStates.waiting_permissions, F.data.startswith("permission_"))
async def process_permissions(call: CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    problem_text = data.get("problem_text", "")

    if not problem_text:
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    _, publish_perm, profile_perm = call.data.split("_")
    can_publish = (publish_perm == "yes")
    include_profile = (profile_perm == "yes")

    session = Session()
    fb = Feedback(
        user_id=call.from_user.id,
        text=problem_text,
        include_profile=include_profile,
        request_type='chat',
        can_publish=can_publish,
        is_published=False
    )
    session.add(fb)
    session.commit()

    response_text = "üíõ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω."
    if not can_publish:
        response_text += " –û–Ω –Ω–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω."
    if include_profile:
        response_text += " –î–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∫–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã."

    await call.message.answer(response_text, reply_markup=get_support_menu())

    user = session.query(User).filter_by(user_id=call.from_user.id).first()
    user_info = format_user_info(user, include_profile)

    for admin_id in ADMINS:
        if can_publish:
            markup = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", callback_data=f"mark_published_{fb.id}")]]
            )
        else:
            markup = None

        await call.bot.send_message(
            chat_id=admin_id,
            text=f"üí¨ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ #–±–æ–ª—Ç–∞–ª–∫—É:\n\n{fb.text}\n{f'üë§ {user_info}' if user_info else ''}",
            reply_markup=markup
        )

    await state.clear()