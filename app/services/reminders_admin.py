from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import func

from app.db.session import Session
from app.db.models import Quote
from app.utils.roles import get_user_role

router = Router()


class QuoteStates(StatesGroup):
    waiting_text = State()
    waiting_category = State()


@router.message(F.text == "‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç–∞–º–∏")
async def manage_quotes(message: Message):
    role = get_user_role(message.from_user.id)
    if role < 1:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏—Ç–∞—Ç")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")]
        ],
        resize_keyboard=True
    )
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏:", reply_markup=markup)


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")
async def add_quote(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã:")
    await state.set_state(QuoteStates.waiting_text)


@router.message(QuoteStates.waiting_text)
async def add_quote_text(message: Message, state: FSMContext):
    if len(message.text) > 500:
        return await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")

    await state.update_data(text=message.text)

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É
    with Session() as session:
        quote = Quote(
            text=message.text,
            category="–æ–±—â–∏–µ"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
        session.add(quote)
        session.commit()

    await message.answer("‚úÖ –¶–∏—Ç–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()


@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç")
async def list_quotes(message: Message):
    with Session() as session:
        quotes = session.query(Quote).all()

        if not quotes:
            return await message.answer("–¶–∏—Ç–∞—Ç –ø–æ–∫–∞ –Ω–µ—Ç.")

        text = "üìã –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç:\n\n"
        for i, quote in enumerate(quotes, 1):
            text += f"{i}. {quote.text[:50]}...\n"

        await message.answer(text)


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏—Ç–∞—Ç")
async def quote_stats(message: Message):
    with Session() as session:
        total = session.query(Quote).count()
        await message.answer(f"üìä –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç –≤ –±–∞–∑–µ: {total}")


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def back_to_admin(message: Message, state: FSMContext):
    await state.clear()
    from app.handlers.admin import admin_panel
    await admin_panel(message)


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(F.text == "/list_quotes")
async def list_quotes_command(message: Message):
    await list_quotes(message)


@router.message(F.text == "/quote_stats")
async def quote_stats_command(message: Message):
    await quote_stats(message)