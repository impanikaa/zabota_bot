from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery, InlineKeyboardMarkup, \
    InlineKeyboardButton, ReplyKeyboardRemove
from datetime import datetime, time
import json
import random

from app.db.session import Session
from app.db.models import UserReminder, Quote, ReminderStat
from app.keyboards import get_main_menu
from app.utils.roles import get_user_role

router = Router()


class ReminderStates(StatesGroup):
    choosing_type = State()
    choosing_habit = State()
    custom_habit = State()
    setting_schedule = State()
    setting_fixed_times = State()
    setting_interval = State()
    setting_random_interval = State()
    setting_quiet_time = State()
    editing_reminder = State()
    deleting_reminder = State()


# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
PREDEFINED_HABITS = {
    "water": "üíß –í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã",
    "posture": "üßò –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–∞–Ω–∫—É",
    "eyes": "üëÄ –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É –¥–ª—è –≥–ª–∞–∑",
    "stretch": "üîÅ –†–∞–∑–º—è—Ç—å—Å—è –∏ –ø–æ—Ç—è–Ω—É—Ç—å—Å—è"
}


@router.message(F.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders_main(message: Message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
            [KeyboardButton(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:", reply_markup=markup)


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def add_reminder(message: Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèÉ –ü—Ä–∏–≤—ã—á–∫–∞"), KeyboardButton(text="üí¨ –¶–∏—Ç–∞—Ç–∞")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=markup)
    await state.set_state(ReminderStates.choosing_type)


@router.message(ReminderStates.choosing_type, F.text.in_(["üèÉ –ü—Ä–∏–≤—ã—á–∫–∞", "üí¨ –¶–∏—Ç–∞—Ç–∞"]))
async def process_type(message: Message, state: FSMContext):
    reminder_type = "habit" if message.text == "üèÉ –ü—Ä–∏–≤—ã—á–∫–∞" else "quote"
    await state.update_data(type=reminder_type)

    if reminder_type == "habit":
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üíß –í–æ–¥–∞"), KeyboardButton(text="üßò –û—Å–∞–Ω–∫–∞")],
                [KeyboardButton(text="üëÄ –ì–ª–∞–∑–∞"), KeyboardButton(text="üîÅ –†–∞–∑–º–∏–Ω–∫–∞")],
                [KeyboardButton(text="‚úèÔ∏è –°–≤–æ—è –ø—Ä–∏–≤—ã—á–∫–∞"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É:", reply_markup=markup)
        await state.set_state(ReminderStates.choosing_habit)
    else:
        await set_schedule_type(message, state)


@router.message(ReminderStates.choosing_habit, F.text.in_(["üíß –í–æ–¥–∞", "üßò –û—Å–∞–Ω–∫–∞", "üëÄ –ì–ª–∞–∑–∞", "üîÅ –†–∞–∑–º–∏–Ω–∫–∞"]))
async def process_predefined_habit(message: Message, state: FSMContext):
    habit_map = {
        "üíß –í–æ–¥–∞": "water",
        "üßò –û—Å–∞–Ω–∫–∞": "posture",
        "üëÄ –ì–ª–∞–∑–∞": "eyes",
        "üîÅ –†–∞–∑–º–∏–Ω–∫–∞": "stretch"
    }
    habit_type = habit_map[message.text]
    await state.update_data(habit_type=habit_type)
    await set_schedule_type(message, state)


@router.message(ReminderStates.choosing_habit, F.text == "‚úèÔ∏è –°–≤–æ—è –ø—Ä–∏–≤—ã—á–∫–∞")
async def custom_habit(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É —Ç–µ–∫—Å—Ç–æ–º:")
    await state.set_state(ReminderStates.custom_habit)


@router.message(ReminderStates.custom_habit)
async def process_custom_habit(message: Message, state: FSMContext):
    if len(message.text) > 100:
        return await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")

    await state.update_data(custom_text=message.text)
    await set_schedule_type(message, state)


async def set_schedule_type(message: Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üïê –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è"), KeyboardButton(text="üîÑ –° –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º")],
            [KeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=markup)
    await state.set_state(ReminderStates.setting_schedule)


@router.message(ReminderStates.setting_schedule,
                F.text.in_(["üïê –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è", "üîÑ –° –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º", "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è"]))
async def process_schedule_type(message: Message, state: FSMContext):
    if message.text == "üïê –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è":
        schedule_type = "fixed"
        await state.update_data(schedule_type=schedule_type)
        await message.answer("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00, 13:00, 18:00)")
        await state.set_state(ReminderStates.setting_fixed_times)
    elif message.text == "üîÑ –° –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º":
        schedule_type = "interval"
        await state.update_data(schedule_type=schedule_type)
        await message.answer("–í–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3 –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞)")
        await state.set_state(ReminderStates.setting_interval)
    else:
        schedule_type = "random"
        await state.update_data(schedule_type=schedule_type)
        await message.answer(
            "–í–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6 –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω—ã–π –º–æ–º–µ–Ω—Ç)")
        await state.set_state(ReminderStates.setting_random_interval)


@router.message(ReminderStates.setting_fixed_times)
async def process_fixed_times(message: Message, state: FSMContext):
    times = [t.strip() for t in message.text.split(",")]
    valid_times = []

    for t in times:
        try:
            datetime.strptime(t, "%H:%M")
            valid_times.append(t)
        except ValueError:
            await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {t}. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú")
            return

    await state.update_data(times=json.dumps(valid_times))
    await set_quiet_time(message, state)


@router.message(ReminderStates.setting_interval)
async def process_interval(message: Message, state: FSMContext):
    try:
        interval = int(message.text)
        if interval < 1:
            raise ValueError
        await state.update_data(interval_hours=interval)
        await set_quiet_time(message, state)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")


@router.message(ReminderStates.setting_random_interval)
async def process_random_interval(message: Message, state: FSMContext):
    try:
        interval = int(message.text)
        if interval < 1:
            raise ValueError
        await state.update_data(random_interval_hours=interval)
        await set_quiet_time(message, state)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")


async def set_quiet_time(message: Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (23:00-06:00)")],
            [KeyboardButton(text="‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è")],
            [KeyboardButton(text="‚ùå –ë–µ–∑ —Ç–∏—Ö–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∏—Ö–æ–µ –≤—Ä–µ–º—è (–∫–æ–≥–¥–∞ –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å)?", reply_markup=markup)
    await state.set_state(ReminderStates.setting_quiet_time)


@router.message(ReminderStates.setting_quiet_time, F.text == "‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (23:00-06:00)")
async def process_default_quiet_time(message: Message, state: FSMContext):
    await save_reminder(message, state, "23:00", "06:00")


@router.message(ReminderStates.setting_quiet_time, F.text == "‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è")
async def custom_quiet_time(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ —Ç–∏—Ö–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–Ω–∞—á–∞–ª–æ-–∫–æ–Ω–µ—Ü' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 23:00-07:00)")


@router.message(ReminderStates.setting_quiet_time, F.text == "‚ùå –ë–µ–∑ —Ç–∏—Ö–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
async def no_quiet_time(message: Message, state: FSMContext):
    await save_reminder(message, state, None, None)


@router.message(ReminderStates.setting_quiet_time)
async def process_custom_quiet_time(message: Message, state: FSMContext):
    if "-" not in message.text:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç '–Ω–∞—á–∞–ª–æ-–∫–æ–Ω–µ—Ü' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 23:00-07:00)")

    try:
        start, end = message.text.split("-", 1)
        datetime.strptime(start.strip(), "%H:%M")
        datetime.strptime(end.strip(), "%H:%M")
        await save_reminder(message, state, start.strip(), end.strip())
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß:–ú–ú")


async def save_reminder(message: Message, state: FSMContext, quiet_start: str, quiet_end: str):
    data = await state.get_data()

    with Session() as session:
        reminder = UserReminder(
            user_id=message.from_user.id,
            type=data['type'],
            habit_type=data.get('habit_type'),
            custom_text=data.get('custom_text'),
            schedule_type=data['schedule_type'],
            times=data.get('times'),
            interval_hours=data.get('interval_hours'),
            random_interval_hours=data.get('random_interval_hours'),
            start_time=quiet_start,
            end_time=quiet_end
        )
        session.add(reminder)
        session.commit()

        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        from app.services.reminder_service import schedule_reminder
        schedule_reminder(reminder)

    await message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_main_menu(get_user_role(message.from_user.id)))
    await state.clear()


@router.message(F.text == "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def list_reminders(message: Message):
    with Session() as session:
        reminders = session.query(UserReminder).filter_by(
            user_id=message.from_user.id,
            is_active=True
        ).all()

        if not reminders:
            return await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

        text = "üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        for i, rem in enumerate(reminders, 1):
            if rem.type == 'habit':
                if rem.habit_type:
                    habit_text = PREDEFINED_HABITS[rem.habit_type]
                else:
                    habit_text = rem.custom_text
                text += f"{i}. üèÉ {habit_text}\n"
            else:
                text += f"{i}. üí¨ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\n"

            if rem.schedule_type == 'fixed':
                times = json.loads(rem.times)
                text += f"   üïê –í—Ä–µ–º—è: {', '.join(times)}\n"
            elif rem.schedule_type == 'interval':
                text += f"   üîÑ –ö–∞–∂–¥—ã–µ {rem.interval_hours} —á.\n"
            else:
                text += f"   üé≤ –°–ª—É—á–∞–π–Ω–æ –∫–∞–∂–¥—ã–µ {rem.random_interval_hours} —á.\n"

            if rem.start_time and rem.end_time:
                text += f"   ü§´ –¢–∏—Ö–∏–µ —á–∞—Å—ã: {rem.start_time}-{rem.end_time}\n\n"
            else:
                text += f"   ü§´ –¢–∏—Ö–∏–µ —á–∞—Å—ã: –Ω–µ—Ç\n\n"

        await message.answer(text)


@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def delete_reminders(message: Message, state: FSMContext):
    with Session() as session:
        reminders = session.query(UserReminder).filter_by(
            user_id=message.from_user.id,
            is_active=True
        ).all()

        if not reminders:
            return await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

        text = "üóëÔ∏è –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        for i, rem in enumerate(reminders, 1):
            if rem.type == 'habit':
                if rem.habit_type:
                    habit_text = PREDEFINED_HABITS[rem.habit_type]
                else:
                    habit_text = rem.custom_text
                text += f"{i}. üèÉ {habit_text}\n"
            else:
                text += f"{i}. üí¨ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\n"

        await message.answer(text)
        await state.set_state(ReminderStates.deleting_reminder)
        await state.update_data(reminders=[r.id for r in reminders])


@router.message(ReminderStates.deleting_reminder)
async def process_delete_reminder(message: Message, state: FSMContext):
    try:
        number = int(message.text.strip())
        data = await state.get_data()
        reminders = data.get('reminders', [])

        if number < 1 or number > len(reminders):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            return

        reminder_id = reminders[number - 1]

        with Session() as session:
            reminder = session.query(UserReminder).get(reminder_id)
            if reminder and reminder.user_id == message.from_user.id:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                from app.services.reminder_service import remove_reminder
                remove_reminder(reminder_id)

                session.delete(reminder)
                session.commit()
                await message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ü–∏—Ñ—Ä–∞–º–∏.")


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_reminders(message: Message, state: FSMContext):
    await state.clear()
    role = get_user_role(message.from_user.id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(role))


@router.message(F.text == "/test_reminder")
async def test_reminder(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        from app.services.reminder_service import send_reminder

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        with Session() as session:
            reminder = UserReminder(
                user_id=message.from_user.id,
                type='habit',
                habit_type='water',
                schedule_type='fixed',
                times=json.dumps(["00:01"]),
                start_time=None,
                end_time=None
            )
            session.add(reminder)
            session.commit()

            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await send_reminder(reminder.id)

        await message.answer("–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@router.message(F.text == "/reload_reminders")
async def reload_reminders(message: Message):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
    try:
        from app.services.reminder_service import load_reminders
        load_reminders()
        await message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")