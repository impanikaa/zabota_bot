from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from app.db.session import Session
from app.db.models import Feedback, User
from app.utils.roles import get_user_role
from app.config import ADMIN_IDS as ADMINS

router = Router()


class AnswerQuestionStates(StatesGroup):
    waiting_answer = State()


class HideQuestionStates(StatesGroup):
    waiting_question_id = State()


@router.message(F.text == "‚ùì –í–æ–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω—É")
async def question_panel(message: Message):
    role = get_user_role(message.from_user.id)
    if role < 1:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–ø—Ä–æ—Å–∞–º.")

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì© –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ", callback_data="question_unanswered")],
            [InlineKeyboardButton(text="üìñ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="question_all")],
            [InlineKeyboardButton(text="üëÅÔ∏è –°–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="question_hidden")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="question_back")]
        ]
    )
    await message.answer("‚ùì –ü–∞–Ω–µ–ª—å –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=markup)


@router.callback_query(F.data == "question_unanswered")
async def show_unanswered_questions(call: CallbackQuery):
    session = Session()
    admin_id = call.from_user.id

    questions = session.query(Feedback).filter(
        Feedback.request_type == 'question',
        Feedback.is_hidden == False,
        ~Feedback.read_by.contains(str(admin_id))
    ).all()

    if not questions:
        return await call.message.edit_text("‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã!")

    text = "üì© <b>–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
    for q in questions:
        date_str = q.created_at.strftime("%d.%m.%Y %H:%M")
        text += f"üÜî <b>ID {q.id}</b> | üìÖ {date_str}\n{q.text}\n\n"

    await call.message.edit_text(text, parse_mode="HTML")


@router.callback_query(F.data == "question_all")
async def show_all_questions(call: CallbackQuery):
    session = Session()
    admin_id = call.from_user.id
    questions = session.query(Feedback).filter(
        Feedback.request_type == 'question',
        Feedback.is_hidden == False
    ).all()

    if not questions:
        return await call.message.edit_text("‚ùå –í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

    text = "üìñ <b>–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n"
    for q in questions:
        date_str = q.created_at.strftime("%d.%m.%Y %H:%M")

        read_by_list = q.read_by.split(",") if q.read_by else []
        if str(admin_id) in read_by_list:
            status_icon = "‚úÖ"
        else:
            status_icon = "üì©"

        read_count = len(read_by_list)
        total_admins = len(ADMINS)
        status_text = f"{status_icon} ({read_count}/{total_admins})"

        text += f"{status_text} | üÜî <b>ID {q.id}</b> | üìÖ {date_str}\n{q.text}\n\n"

    await call.message.edit_text(text, parse_mode="HTML")


@router.callback_query(F.data == "question_hidden")
async def show_hidden_questions(call: CallbackQuery):
    session = Session()
    questions = session.query(Feedback).filter(
        Feedback.request_type == 'question',
        Feedback.is_hidden == True
    ).all()

    if not questions:
        return await call.message.edit_text("‚ùå –°–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.")

    text = "üëÅÔ∏è <b>–°–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
    for q in questions:
        date_str = q.created_at.strftime("%d.%m.%Y %H:%M")

        read_count = len(q.read_by.split(",")) if q.read_by else 0
        status = "‚úÖ" if read_count > 0 else "üì©"

        text += f"{status} üÜî <b>ID {q.id}</b> | üìÖ {date_str}\n{q.text}\n\n"

    await call.message.edit_text(text, parse_mode="HTML")


@router.callback_query(F.data == "question_back")
async def back_from_question(call: CallbackQuery):
    await call.message.edit_text("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω–∫—É.")


@router.callback_query(F.data.startswith("answer_question_"))
async def answer_question_callback(call: CallbackQuery, state: FSMContext):
    question_id = int(call.data.split("_")[-1])

    session = Session()
    question = session.query(Feedback).get(question_id)

    if not question:
        await call.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if question.request_type != 'question':
        await call.answer("–≠—Ç–æ –Ω–µ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return

    # –ü–æ–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
    read_by = question.read_by.split(",") if question.read_by else []
    if str(call.from_user.id) not in read_by:
        read_by.append(str(call.from_user.id))
        question.read_by = ",".join(read_by)
        session.commit()

    await state.update_data(question_id=question_id, user_id=question.user_id)
    await call.message.answer("–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(AnswerQuestionStates.waiting_answer)

    await call.answer()


@router.message(AnswerQuestionStates.waiting_answer)
async def process_answer(message: Message, state: FSMContext):
    answer_text = message.text.strip()
    data = await state.get_data()
    question_id = data.get("question_id")
    user_id = data.get("user_id")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{answer_text}"
        )
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

    await state.clear()


@router.message(F.text == "üìù –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å")
async def answer_question_button(message: Message, state: FSMContext):
    role = get_user_role(message.from_user.id)
    if role < 1:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")

    await message.answer("–í–≤–µ–¥–∏ ID –≤–æ–ø—Ä–æ—Å–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å:")
    await state.set_state(HideQuestionStates.waiting_question_id)


@router.message(HideQuestionStates.waiting_question_id)
async def process_question_id(message: Message, state: FSMContext):
    try:
        question_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    session = Session()
    question = session.query(Feedback).get(question_id)

    if not question:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if question.request_type != 'question':
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await state.clear()
        return

    # –ü–æ–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
    read_by = question.read_by.split(",") if question.read_by else []
    if str(message.from_user.id) not in read_by:
        read_by.append(str(message.from_user.id))
        question.read_by = ",".join(read_by)
        session.commit()

    await state.update_data(question_id=question_id, user_id=question.user_id)
    await message.answer("–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(AnswerQuestionStates.waiting_answer)


@router.message(F.text.startswith("/hide_question"))
async def hide_question_command(message: Message):
    role = get_user_role(message.from_user.id)
    if role < 1:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    try:
        question_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hide_question <ID>")
        return

    session = Session()
    question = session.query(Feedback).get(question_id)

    if not question:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if question.request_type != 'question':
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–µ–ª—å–∑—è —Å–∫—Ä—ã—Ç—å.")
        return

    question.is_hidden = True
    session.commit()

    await message.answer(f"‚úÖ –í–æ–ø—Ä–æ—Å ID {question_id} —Å–∫—Ä—ã—Ç!")


@router.message(HideQuestionStates.waiting_question_id)
async def process_hide_question(message: Message, state: FSMContext):
    try:
        question_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    session = Session()
    question = session.query(Feedback).get(question_id)

    if not question:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if question.request_type != 'question':
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–µ–ª—å–∑—è —Å–∫—Ä—ã—Ç—å.")
        await state.clear()
        return

    question.is_hidden = True
    session.commit()

    await message.answer(f"‚úÖ –í–æ–ø—Ä–æ—Å ID {question_id} —Å–∫—Ä—ã—Ç!")
    await state.clear()