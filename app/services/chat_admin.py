from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from app.db.session import Session
from app.db.models import Feedback, User
from app.utils.roles import get_user_role
from app.config import ADMIN_IDS as ADMINS
from app.utils.format import format_user_info

router = Router()


class AdminChatStates(StatesGroup):
    waiting_chat_id = State()
    waiting_post_link = State()


class MarkPublishedStates(StatesGroup):
    waiting_chat_id = State()
    waiting_post_link = State()


class HideChatStates(StatesGroup):
    waiting_chat_id = State()


@router.message(F.text == "üí¨ –ë–æ–ª—Ç–∞–ª–∫–∞")
async def chat_panel(message: Message):
    role = get_user_role(message.from_user.id)
    if role < 1:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ–ª—Ç–∞–ª–∫–µ.")

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ù–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ", callback_data="chat_unpublished")],
            [InlineKeyboardButton(text="üìñ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="chat_all")],
            [InlineKeyboardButton(text="üëÅÔ∏è –°–∫—Ä—ã—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="chat_hidden")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="chat_back")]
        ]
    )
    await message.answer("üí¨ –ü–∞–Ω–µ–ª—å –±–æ–ª—Ç–∞–ª–∫–∏:", reply_markup=markup)


@router.callback_query(F.data == "chat_unpublished")
async def show_unpublished_chats(call: CallbackQuery):
    session = Session()
    admin_id = call.from_user.id

    chats = session.query(Feedback).filter(
        Feedback.request_type == 'chat',
        Feedback.can_publish == True,
        Feedback.is_published == False,
        Feedback.is_hidden == False,
        ~Feedback.read_by.contains(str(admin_id))
    ).all()

    if not chats:
        return await call.message.edit_text("‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã!")

    text = "üìù <b>–ù–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n"
    for chat in chats:
        date_str = chat.created_at.strftime("%d.%m.%Y %H:%M")
        user = session.query(User).filter_by(user_id=chat.user_id).first()
        user_info = format_user_info(user, chat.include_profile)

        text += f"üÜî <b>ID {chat.id}</b> | üìÖ {date_str}{f' | üë§ {user_info}' if user_info else ''}\n{chat.text}\n\n"

    await call.message.edit_text(text, parse_mode="HTML")


@router.callback_query(F.data == "chat_all")
async def show_all_chats(call: CallbackQuery):
    session = Session()
    admin_id = call.from_user.id
    chats = session.query(Feedback).filter(
        Feedback.request_type == 'chat',
        Feedback.is_hidden == False
    ).all()

    if not chats:
        return await call.message.edit_text("‚ùå –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–æ–ª—Ç–∞–ª–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç.")

    text = "üìñ <b>–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –±–æ–ª—Ç–∞–ª–∫–µ:</b>\n\n"
    for chat in chats:
        date_str = chat.created_at.strftime("%d.%m.%Y %H:%M")

        if not chat.can_publish:
            status = "üö´ –ù–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        elif chat.is_published:
            status = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
        else:
            status = "üìù –û–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"

        user = session.query(User).filter_by(user_id=chat.user_id).first()
        user_info = format_user_info(user, chat.include_profile)

        text += f"{status} | üÜî <b>ID {chat.id}</b> | üìÖ {date_str}{f' | üë§ {user_info}' if user_info else ''}\n{chat.text}\n\n"

    await call.message.edit_text(text, parse_mode="HTML")


@router.callback_query(F.data == "chat_hidden")
async def show_hidden_chats(call: CallbackQuery):
    session = Session()
    chats = session.query(Feedback).filter(
        Feedback.request_type == 'chat',
        Feedback.is_hidden == True
    ).all()

    if not chats:
        return await call.message.edit_text("‚ùå –°–∫—Ä—ã—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.")

    text = "üëÅÔ∏è <b>–°–∫—Ä—ã—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n"
    for chat in chats:
        date_str = chat.created_at.strftime("%d.%m.%Y %H:%M")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        if not chat.can_publish:
            status = "üö´"
        elif chat.is_published:
            status = "‚úÖ"
        else:
            status = "üìù"

        user = session.query(User).filter_by(user_id=chat.user_id).first()

        if chat.include_profile and user and user.consent:
            user_info = format_user_info(user, chat.include_profile)
            user_display = f"üë§ {user_info}" if user_info else ""
        else:
            user_display = ""

        text += f"{status} üÜî <b>ID {chat.id}</b> | üìÖ {date_str}{f' | {user_display}' if user_display else ''}\n{chat.text}\n\n"

    await call.message.edit_text(text, parse_mode="HTML")


@router.callback_query(F.data == "chat_back")
async def back_from_chat(call: CallbackQuery):
    await call.message.edit_text("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω–∫—É.")


@router.callback_query(F.data.startswith("mark_published_"))
async def mark_published_callback(call: CallbackQuery, state: FSMContext):
    chat_id = int(call.data.split("_")[-1])

    session = Session()
    chat = session.query(Feedback).get(chat_id)

    if not chat:
        await call.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if chat.request_type != 'chat':
        await call.answer("–≠—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –±–æ–ª—Ç–∞–ª–∫–∏")
        return

    if not chat.can_publish:
        await call.answer("–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
        return

    await state.update_data(chat_id=chat_id)
    await call.message.answer("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:")
    await state.set_state(MarkPublishedStates.waiting_post_link)

    await call.answer()


@router.message(MarkPublishedStates.waiting_post_link)
async def process_post_link(message: Message, state: FSMContext):
    post_link = message.text.strip()
    data = await state.get_data()
    chat_id = data.get("chat_id")

    session = Session()
    chat = session.query(Feedback).get(chat_id)

    if chat:
        chat.is_published = True
        chat.post_link = post_link
        session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await message.bot.send_message(
                chat_id=chat.user_id,
                text=f"üí¨ –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤ #–±–æ–ª—Ç–∞–ª–∫—É –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥—É—Ç.\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: {post_link}"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat.user_id}: {e}")

        await message.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å ID {chat_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()


@router.message(F.text == "/mark_published")
async def start_mark_published(message: Message, state: FSMContext):
    role = get_user_role(message.from_user.id)
    if role < 1:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    await message.answer("–í–≤–µ–¥–∏ ID –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π:")
    await state.set_state(MarkPublishedStates.waiting_chat_id)


@router.message(MarkPublishedStates.waiting_chat_id)
async def process_mark_published(message: Message, state: FSMContext):
    try:
        chat_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    session = Session()
    chat = session.query(Feedback).get(chat_id)

    if not chat:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if chat.request_type != 'chat':
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –±–æ–ª—Ç–∞–ª–∫–∏, –Ω–µ–ª—å–∑—è –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π.")
        await state.clear()
        return

    if not chat.can_publish:
        await message.answer("‚ùå –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")
        await state.clear()
        return

    await state.update_data(chat_id=chat_id)
    await message.answer("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:")
    await state.set_state(MarkPublishedStates.waiting_post_link)


@router.message(F.text == "üìù –û—Ç–º–µ—Ç–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º")
async def mark_published_button(message: Message, state: FSMContext):
    role = get_user_role(message.from_user.id)
    if role < 1:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")

    await message.answer("–í–≤–µ–¥–∏ ID –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π:")
    await state.set_state(MarkPublishedStates.waiting_chat_id)


@router.message(F.text.startswith("/hide_chat"))
async def hide_chat_command(message: Message):
    role = get_user_role(message.from_user.id)
    if role < 1:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    try:
        chat_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hide_chat <ID>")
        return

    session = Session()
    chat = session.query(Feedback).get(chat_id)

    if not chat:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if chat.request_type != 'chat':
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –±–æ–ª—Ç–∞–ª–∫–∏, –Ω–µ–ª—å–∑—è —Å–∫—Ä—ã—Ç—å.")
        return

    chat.is_hidden = True
    session.commit()

    await message.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å ID {chat_id} —Å–∫—Ä—ã—Ç!")


@router.message(HideChatStates.waiting_chat_id)
async def process_hide_chat(message: Message, state: FSMContext):
    try:
        chat_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    session = Session()
    chat = session.query(Feedback).get(chat_id)

    if not chat:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if chat.request_type != 'chat':
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –±–æ–ª—Ç–∞–ª–∫–∏, –Ω–µ–ª—å–∑—è —Å–∫—Ä—ã—Ç—å.")
        await state.clear()
        return

    chat.is_hidden = True
    session.commit()

    await message.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å ID {chat_id} —Å–∫—Ä—ã—Ç!")
    await state.clear()
