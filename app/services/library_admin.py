# app/handlers/library_admin.py
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from datetime import datetime

from app.db.session import Session
from app.db.models import Article
from app.utils.roles import get_user_role

router = Router()

# States
class AddArticleStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_link = State()
    waiting_for_date = State()

class EditArticleStates(StatesGroup):
    waiting_for_field = State()
    waiting_for_value = State()

# Helpers
def get_ordered_articles(session):
    return session.query(Article).order_by(Article.date.asc(), Article.id.asc()).all()

def list_articles_text(session) -> str:
    articles = get_ordered_articles(session)
    if not articles:
        return "üìö –í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π."
    text = "üìö –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π:\n\n"
    for idx, a in enumerate(articles, start=1):
        text += f"{idx}. {a.title}\n"
    return text

# === Add article (step-by-step) ===
@router.message(Command("add_article"))
async def add_article_start(message: Message, state: FSMContext):
    if get_user_role(message.from_user.id) < 1:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
    await message.answer("üìù –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏:")
    await state.set_state(AddArticleStates.waiting_for_title)

@router.message(AddArticleStates.waiting_for_title)
async def add_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(AddArticleStates.waiting_for_description)

@router.message(AddArticleStates.waiting_for_description)
async def add_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await message.answer("üîó –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é (Telegra.ph):")
    await state.set_state(AddArticleStates.waiting_for_link)

@router.message(AddArticleStates.waiting_for_link)
async def add_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text.strip())
    await message.answer("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä 2025-03-22):")
    await state.set_state(AddArticleStates.waiting_for_date)

@router.message(AddArticleStates.waiting_for_date)
async def add_date(message: Message, state: FSMContext):
    txt = message.text.strip()
    try:
        dt = datetime.strptime(txt, "%Y-%m-%d")
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π YYYY-MM-DD.")
    data = await state.get_data()
    session = Session()
    article = Article(
        title=data["title"],
        description=data["description"],
        link=data["link"],
        date=dt
    )
    session.add(article)
    session.commit()
    await state.clear()
    await message.answer("‚úÖ –°—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n" + list_articles_text(session))

# === Delete article ===
@router.message(Command("del_art"))
async def delete_article(message: Message):
    if get_user_role(message.from_user.id) < 1:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
    parts = message.text.split()
    session = Session()
    if len(parts) < 2:
        return await message.answer("‚ùó –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n" + list_articles_text(session))
    try:
        num = int(parts[1])
    except ValueError:
        return await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
    articles = get_ordered_articles(session)
    if num < 1 or num > len(articles):
        return await message.answer("‚ùå –°—Ç–∞—Ç—å—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    article = articles[num-1]
    session.delete(article)
    session.commit()
    await message.answer("üóë –°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞.\n\n" + list_articles_text(session))

# === Edit article (command) ===
@router.message(Command("edit_art"))
async def edit_art_start(message: Message, state: FSMContext):
    if get_user_role(message.from_user.id) < 1:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
    parts = message.text.split()
    session = Session()
    if len(parts) < 2:
        return await message.answer("‚ùó –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n" + list_articles_text(session))
    try:
        num = int(parts[1])
    except ValueError:
        return await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
    articles = get_ordered_articles(session)
    if num < 1 or num > len(articles):
        return await message.answer("‚ùå –°—Ç–∞—Ç—å—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    article = articles[num-1]
    await state.update_data(article_id=article.id)
    await state.set_state(EditArticleStates.waiting_for_field)
    await message.answer("–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º? –í–≤–µ–¥–∏ –æ–¥–Ω–æ –∏–∑: title / description / link / date")

@router.message(EditArticleStates.waiting_for_field)
async def edit_field(message: Message, state: FSMContext):
    fld = message.text.strip().lower()
    if fld not in ("title", "description", "link", "date"):
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: title, description, link, date")
    await state.update_data(field=fld)
    await state.set_state(EditArticleStates.waiting_for_value)
    await message.answer(f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {fld}:")

@router.message(EditArticleStates.waiting_for_value)
async def edit_value(message: Message, state: FSMContext):
    data = await state.get_data()
    session = Session()
    article = session.query(Article).filter_by(id=data["article_id"]).first()
    if not article:
        await state.clear()
        return await message.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    field = data["field"]
    new_raw = message.text.strip()
    if field == "date":
        try:
            new_dt = datetime.strptime(new_raw, "%Y-%m-%d")
        except ValueError:
            return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π YYYY-MM-DD.")
        article.date = new_dt
    else:
        setattr(article, field, new_raw)
    session.commit()
    await state.clear()
    await message.answer("‚úÖ –°—Ç–∞—Ç—å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n\n" + list_articles_text(session))
