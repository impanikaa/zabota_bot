import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage

from app.handlers import user, admin
from app.services import library, library_admin, feedback, feedback_admin
from app.db.session import Session
from app.db.models import User
from app.keyboards import get_main_menu
from app.db import init_db
from app.config import BOT_TOKEN
from app.utils.roles import get_user_role

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    session = Session()
    user_id = message.from_user.id
    is_new = False
    role = get_user_role(user_id)

    if user_id != bot.id and not session.query(User).filter_by(user_id=user_id).first():
        session.add(User(user_id=user_id, role=0))
        session.commit()
        is_new = True

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ó–∞–±–æ—Ç–∞—Ç—å!¬ª ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤ üíõ\n\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_main_menu(role)
    )

    if is_new:
        await asyncio.sleep(0.3)
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="fill_profile")]
            ]
        )
        await bot.send_message(
            chat_id=message.chat.id,
            text="–•–æ—á–µ—à—å —Å—Ä–∞–∑—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?",
            reply_markup=markup
        )


@dp.message(lambda m: m.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def handle_reminders(message: Message):
    await message.answer("‚è∞ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!")

@dp.message(lambda m: m.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: Message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üôè #–±–æ–ª—Ç–∞–ª–∫–∞")],
            [KeyboardButton(text="üìù –û—Ç–∑—ã–≤")],
            [KeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í–æ—Ç, —á—Ç–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=markup)

@dp.message(lambda m: m.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
async def handle_about(message: Message):
    await message.answer("‚ÑπÔ∏è ¬´–ó–∞–±–æ—Ç–∞—Ç—å!¬ª ‚Äî –ø—Ä–æ–µ–∫—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://zabota-olymp.ru")

@dp.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message):
    role = get_user_role(message.from_user.id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(role))

@dp.message(F.text == "/myid")
async def get_my_id(message: Message):
    await message.answer(f"–¢–≤–æ–π user_id: {message.from_user.id}\n–¢–≤–æ–π username: @{message.from_user.username or '–Ω–µ—Ç'}")

async def main():
    init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    dp.include_router(user.router)
    dp.include_router(admin.router)
    dp.include_router(library.router)
    dp.include_router(library_admin.router)
    dp.include_router(feedback.router)
    dp.include_router(feedback_admin.router)
    await dp.start_polling(bot)
    # print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main())
