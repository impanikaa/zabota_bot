import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from handlers import user
from db.session import Session
from db.models import User

from app.db import init_db
from config import BOT_TOKEN

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    session = Session()
    user_id = message.from_user.id

    if not session.query(User).filter_by(user_id=user_id).first():
        session.add(User(user_id=user_id))
        session.commit()

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ó–∞–±–æ—Ç–∞—Ç—å!¬ª ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤ üíõ\n\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_main_menu()
    )


@dp.message(lambda m: m.text == "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")
async def handle_library(message: Message):
    await message.answer("üìö –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å—Ç–∞—Ç–µ–π. –ü–æ–∫–∞ –æ–Ω–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

@dp.message(lambda m: m.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def handle_reminders(message: Message):
    await message.answer("‚è∞ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!")

@dp.message(lambda m: m.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: Message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üôè #–±–æ–ª—Ç–∞–ª–∫–∞")],
            [KeyboardButton(text="üìù –û—Ç–∑—ã–≤")],
            [KeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í–æ—Ç, —á—Ç–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=markup)

@dp.message(lambda m: m.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
async def handle_about(message: Message):
    await message.answer("‚ÑπÔ∏è ¬´–ó–∞–±–æ—Ç–∞—Ç—å!¬ª ‚Äî –ø—Ä–æ–µ–∫—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://zabota-olymp.ru")

@dp.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")],
            [KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
            [KeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")],
        ],
        resize_keyboard=True
    )

def get_support_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

async def main():
    init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    dp.include_router(user.router)
    await dp.start_polling(bot)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main())
