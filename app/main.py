import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
import logging

from app.handlers import user, admin, broadcast, superadmin
from app.services import (library, library_admin, feedback, feedback_admin, chat, chat_admin, question,
                          question_admin, reminders_admin, reminders)
from app.db.session import Session
from app.db.models import User
from app.keyboards import get_main_menu
from app.db import init_db
from app.config import BOT_TOKEN
from app.utils.roles import get_user_role

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


@dp.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    session = Session()
    user_id = message.from_user.id
    is_new = False
    role = get_user_role(user_id)

    if user_id != bot.id and not session.query(User).filter_by(user_id=user_id).first():
        session.add(User(user_id=user_id, role=0))
        session.commit()
        is_new = True

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ó–∞–±–æ—Ç–∞—Ç—å!¬ª ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤ üíõ\n\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_main_menu(role)
    )

    if is_new:
        await asyncio.sleep(0.3)
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="fill_profile")]
            ]
        )
        await bot.send_message(
            chat_id=message.chat.id,
            text="–•–æ—á–µ—à—å —Å—Ä–∞–∑—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?",
            reply_markup=markup
        )


@dp.message(lambda m: m.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: Message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üôè #–±–æ–ª—Ç–∞–ª–∫–∞")],
            [KeyboardButton(text="üìù –û—Ç–∑—ã–≤")],
            [KeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í–æ—Ç, —á—Ç–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=markup)


@dp.message(lambda m: m.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
async def handle_about(message: Message):
    await message.answer(
        "‚ÑπÔ∏è ¬´–ó–∞–±–æ—Ç–∞—Ç—å!¬ª ‚Äî –ø—Ä–æ–µ–∫—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://zabota-olymp.ru")


@dp.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message):
    role = get_user_role(message.from_user.id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(role))


@dp.message(F.text == "/myid")
async def get_my_id(message: Message):
    await message.answer(f"–¢–≤–æ–π user_id: {message.from_user.id}\n–¢–≤–æ–π username: @{message.from_user.username or '–Ω–µ—Ç'}")


@dp.message(F.text == "/check_scheduler")
async def check_scheduler(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    from app.services.reminder_service import scheduler
    jobs = scheduler.get_jobs()
    await message.answer(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–¥–∞–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {len(jobs)}")


async def main():
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(user.router)
    dp.include_router(admin.router)
    dp.include_router(broadcast.router)
    dp.include_router(superadmin.router)
    dp.include_router(library.router)
    dp.include_router(library_admin.router)
    dp.include_router(feedback.router)
    dp.include_router(feedback_admin.router)
    dp.include_router(chat.router)
    dp.include_router(chat_admin.router)
    dp.include_router(question.router)
    dp.include_router(question_admin.router)
    dp.include_router(reminders.router)
    dp.include_router(reminders_admin.router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
